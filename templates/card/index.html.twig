{% extends 'base.html.twig' %}

{% block title %}Mes cartes
{% endblock %}

{% block body %}
	<div class="container mx-auto py-8">
		<div class="flex justify-between items-center mb-6">
			<h1 class="text-3xl font-futuraMedium">Mes cartes</h1>
			<!-- Bouton pour créer une nouvelle carte -->
			<a href="{{ path('app_card_create') }}" class="text-white bg-green-500 px-4 py-2 rounded hover:bg-green-600">
				Créer une carte
			</a>
		</div>

		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 justify-items-center">
			{% for card in cards %}
				<div class="p-6 rounded-lg shadow-md relative w-[350px] justify-center">
					{% if card.imagePath %}
						<div class="card">
							<div
								class="card-content relative overflow-hidden {% if card.type.value == 'dark' %} text-white {% else %} text-black {% endif %}">

								<!-- Halo lumineux -->
								<div class="halo absolute z-30 top-0 left-0 w-24 h-24 rounded-full pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>

								{# Nom de la carte #}
								<p class="absolute font-GillSans font-sem z-20 top-[11px] left-[58px] text-[20px]">{{ card.name }}</p>

								{# PV #}
								<p class="absolute font-GillSans font-bold z-20 top-[7px] right-[41px] text-[8px] tracking-tighter">PV
									<span class="text-[24px] font-GillSans font-sem tracking-tighter">{{ card.hp }}</span>
								</p>


								{# Attaques de la carte #}
								<div class="flex justify-center flex-col gap-3 items-center absolute z-20 bottom-[66px] left-[24px] h-[140px] w-[260px] p-1">
									{% for attack in card.attacks %}
										<div class="flex flex-col">
											<div class="flex items-center justify-between w-[252px] align-baseline">
												<div class="flex items-center gap-6">
													<div
														class="flex w-[60px] items-center gap-[2px]">
														{# Afficher le nombre d'énergies basé sur l'index de la première boucle #}
														{% if attack.cost > 0 %}
															{% for i in 1..attack.cost %}
																<img src="/assets/energies/{{ card.type.value }}.png" alt="energy.png" class="w-[17.5px] h-[17.5px]">
															{% endfor %}
														{% endif %}
													</div>
													<p class="font-GillSansCn font-bold text-[18px] leading-[18px] tracking-wide">{{ attack.title }}</p>
												</div>
												<p class="font-GillSans font-semibold text-[17px] leading-[18px] tracking-tighter">{{ attack.power }}</p>
											</div>
											<p class="font-GillSans font-medium text-[10px]">{{ attack.description }}</p>
										</div>
									{% endfor %}


								</div>

								{# Type de la carte #}
								<img
								src="/assets/template_cards/{{card.type.value}}.png" alt="{{ card.type.value }}.png" class="relative z-10 w-full h-auto user-drag-none">

								{# Image du pokemon #}
								<div class="absolute top-[42px] left-[24px] border-black h-[156px] w-[252px] bg-white user-drag-none">
									<img draggable='false' src="{{ asset('images/cards/' ~ card.imagePath) }}" alt="Image carte" class="h-full w-full object-cover">
								</div>

								{# Description de la carte #}
								<div class="flex absolute z-20 bottom-[14px] right-[18px] w-[150px] h-[27px] text-right items-center">
									<p class="font-Mitra font-medium text-[9px] leading-[9px] text-gray-700">{{ card.description }}</p>
								</div>
							</div>
						</div>


					{% endif %}

					<div class="flex justify-between mt-4">
						<a href="{{ path('app_card_edit', { id: card.id }) }}" class="text-white bg-blue-500 px-4 py-2 rounded hover:bg-blue-600">
							Modifier
						</a>

						<!-- Bouton pour afficher la popup -->
						<button data-card-id="{{ card.id }}" data-csrf-token="{{ csrf_token('delete_card_' ~ card.id) }}" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 show-delete-popup">
							Supprimer
						</button>
					</div>
				</div>
			{% endfor %}
		</div>

	</div>

	<script>
		document.querySelectorAll('.card').forEach((card) => {
const cardContent = card.querySelector('.card-content');
const halo = card.querySelector('.halo');

card.addEventListener('mousemove', (e) => { // Afficher le halo
halo.style.opacity = '1';

const rect = card.getBoundingClientRect();
const x = e.clientX - rect.left; // Position X de la souris relative à la carte
const y = e.clientY - rect.top; // Position Y de la souris relative à la carte

const xRot = ((y / rect.height) - 0.5) * 50; // Rotation X
const yRot = ((x / rect.width) - 0.5) * -50; // Rotation Y

cardContent.style.transform = `rotateX(${xRot}deg) rotateY(${yRot}deg)`;

// Positionner le halo
halo.style.left = `${x}px`;
halo.style.top = `${y}px`;
});

card.addEventListener('mouseleave', () => {
cardContent.style.transform = 'rotateX(0deg) rotateY(0deg)';
// Retour à l'état initial

// Cacher le halo
halo.style.opacity = '0';
});
});
	</script>
{% endblock %}
